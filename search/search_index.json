{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compilador Python -&gt; Ruby","text":"<p>Projeto realizado para a disciplina de Compiladores 1 ministrada pelo professor Dr. S\u00e9rgio Freitas na Universidade de Bras\u00edlia (UnB).</p>"},{"location":"#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O objetivo deste projeto \u00e9 desenvolver um compilador que traduza c\u00f3digo escrito em Python para Ruby. Ambos s\u00e3o linguagens de alto n\u00edvel, din\u00e2micas e interpretadas. Foram consideradas algumas decis\u00f5es t\u00e9cnicas para a escolha dessas linguagens:</p> <ul> <li>Sintaxe Simples: Python e Ruby possuem sintaxes relativamente simples e leg\u00edveis, o que facilita a tradu\u00e7\u00e3o entre elas.</li> <li>Popularidade: Ambas as linguagens s\u00e3o amplamente utilizadas na ind\u00fastria, o que torna o projeto relevante.</li> </ul>"},{"location":"#integrantes-do-grupo","title":"Integrantes do Grupo","text":"Ana Luiza Soares Gabriel Flores Coelho Jo\u00e3o Victor Sapiencia Vilmar Fagundes Matheus de Alc\u00e2ntara"},{"location":"#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor 2025-09-10 <code>1.0</code> Cria\u00e7\u00e3o do documento inicial Matheus de Alc\u00e2ntara"},{"location":"testes/","title":"Testes Automatizados do Compilador","text":""},{"location":"testes/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Para garantir a qualidade, a estabilidade e a corretude do compilador a cada nova altera\u00e7\u00e3o, foi implementado um sistema de testes automatizados. Este documento detalha seu funcionamento, desde a integra\u00e7\u00e3o cont\u00ednua com GitHub Actions at\u00e9 a estrutura dos testes locais com Pytest.</p> <p>Observa\u00e7\u00e3o: Ainda h\u00e1 muito a ser melhorado na quantidade e qualidade dos testes. Devido a falhas encontradas durante sua execu\u00e7\u00e3o, o tempo gasto para corrigi-las impactou tanto o desenvolvimento do projeto quanto a cria\u00e7\u00e3o de mais testes.</p>"},{"location":"testes/#automacao-com-github-actions","title":"Automa\u00e7\u00e3o com GitHub Actions","text":"<p>O pilar da automa\u00e7\u00e3o \u00e9 o workflow de Integra\u00e7\u00e3o Cont\u00ednua (CI) definido em <code>.github/workflows/python-tests.yml</code>. O processo \u00e9 disparado automaticamente a cada <code>push</code> ou <code>pull request</code> nos branches <code>main</code> e <code>dev</code>, garantindo que nenhuma altera\u00e7\u00e3o que quebre o projeto seja integrada.</p> <p>O workflow executa os seguintes passos: 1.  Configura\u00e7\u00e3o do Ambiente: Prepara uma m\u00e1quina virtual Linux. 2.  Instala\u00e7\u00e3o de Depend\u00eancias: Instala todas as ferramentas necess\u00e1rias para compilar e testar o projeto:</p> <pre><code>- Python 3.x e a biblioteca `pytest`\n- As ferramentas de compila\u00e7\u00e3o `flex`, `bison` e a biblioteca `libfl-dev`\n</code></pre> <ol> <li>Execu\u00e7\u00e3o dos Testes: Roda o conjunto de testes com o comando <code>pytest .</code>. </li> </ol> <p>Qualquer falha, seja na compila\u00e7\u00e3o do c\u00f3digo C ou na execu\u00e7\u00e3o dos testes, \u00e9 imediatamente reportada no GitHub, bloqueando o merge de c\u00f3digo defeituoso.</p>"},{"location":"testes/#estrutura-dos-testes-com-pytest","title":"Estrutura dos Testes com Pytest","text":"<p>Os testes foram escritos em Python utilizando o framework <code>pytest</code> e est\u00e3o localizados em <code>tests/test_compilador.py</code>. A l\u00f3gica foi desenhada para ser simples e expans\u00edvel.</p>"},{"location":"testes/#1-compilacao-em-tempo-real","title":"1. Compila\u00e7\u00e3o em Tempo Real","text":"<p>Para garantir que estamos sempre testando a vers\u00e3o mais recente do c\u00f3digo, o compilador \u00e9 inicializado toda vez que tem um novo teste.</p> <ul> <li>Comando Executado:</li> </ul> <p><code>bash   flex lexer/lexer.l &amp;&amp; bison -d parser/parser.y &amp;&amp; gcc -o compilador lex.yy.c parser.tab.c -lfl</code></p> <ul> <li>L\u00f3gica: Esta <code>fixture</code> compila o projeto do zero. Se a compila\u00e7\u00e3o falhar por qualquer motivo (erros de sintaxe em C, problemas no Flex/Bison), os testes s\u00e3o interrompidos e o erro \u00e9 exibido, fornecendo feedback imediato sobre problemas na base do c\u00f3digo.</li> </ul>"},{"location":"testes/#2-validacao-da-saida-de-debug","title":"2. Valida\u00e7\u00e3o da Sa\u00edda de Debug","text":"<p>O teste principal, <code>test_saida_de_debug_do_compilador</code>, valida a l\u00f3gica do analisador l\u00e9xico e sint\u00e1tico de forma sistem\u00e1tica:</p> <ol> <li>Descoberta de Testes: O script varre a pasta <code>tests/entradas/</code> em busca de todos os arquivos de cen\u00e1rio <code>entrada*.txt</code>.</li> <li> <p>Execu\u00e7\u00e3o por Cen\u00e1rio: Para cada arquivo de entrada encontrado, o teste executa os seguintes passos:</p> <ul> <li>Leitura: Carrega o conte\u00fado do c\u00f3digo-fonte de <code>entradaX.txt</code> e a sa\u00edda de debug esperada do arquivo correspondente <code>saidaX.txt</code>.</li> <li>Execu\u00e7\u00e3o do Compilador: O execut\u00e1vel <code>compilador</code> \u00e9 chamado, e o c\u00f3digo-fonte \u00e9 passado para ele via entrada padr\u00e3o (<code>stdin</code>).</li> <li>Captura da Sa\u00edda: A sa\u00edda de debug, que nosso compilador emite na sa\u00edda de erro padr\u00e3o (<code>stderr</code>), \u00e9 capturada em tempo real.</li> <li>Compara\u00e7\u00e3o: A parte crucial: a sa\u00edda de debug real \u00e9 comparada, linha por linha, com o conte\u00fado do arquivo de sa\u00edda esperado.</li> <li>Valida\u00e7\u00e3o: Qualquer diverg\u00eancia resulta em uma falha no teste, que aponta exatamente qual cen\u00e1rio (<code>entradaX.txt</code>) n\u00e3o se comportou como o esperado, facilitando a depura\u00e7\u00e3o.</li> </ul> </li> </ol>"},{"location":"testes/#objetivo-principal-dos-testes","title":"Objetivo Principal dos Testes","text":"<p>Nesta fase do desenvolvimento, o objetivo central \u00e9 garantir que o analisadores l\u00e9xico est\u00e1 funcionando corretamente. A estrat\u00e9gia de comparar a sa\u00edda de debug (<code>stderr</code>) \u00e9 uma forma eficaz de \"ver o que o compilador est\u00e1 pensando\".</p> <p>Os testes validam se o compilador consegue:</p> <ul> <li>Identificar corretamente palavras-chave (<code>if</code>, <code>def</code>, <code>while</code>).</li> <li>Reconhecer identificadores, n\u00fameros, strings e operadores.</li> <li>Processar a estrutura de indenta\u00e7\u00e3o, gerando os tokens <code>INDENT</code> e <code>DEDENT</code> nos locais corretos.</li> </ul> <p>Essencialmente, estamos validando se o fluxo de tokens corresponde exatamente ao esperado para cada c\u00f3digo de entrada.</p>"},{"location":"testes/#como-executar-os-testes-localmente","title":"Como Executar os Testes Localmente","text":"<p>Para rodar o conjunto de testes no seu ambiente de desenvolvimento, certifique-se de que as depend\u00eancias (<code>pytest</code>, <code>flex</code>, <code>bison</code>) est\u00e3o instaladas e execute o seguinte comando na raiz do projeto:</p> <pre><code>pytest .\n</code></pre>"},{"location":"testes/#referencias","title":"Refer\u00eancias","text":"<p>\u200cFREITAS, Sergio. COMP 1. Dispon\u00edvel em: &lt;https://github.com/sergioaafreitas&gt;. Acesso em: 30 set. 2025.</p>"},{"location":"testes/#tabela-de-versionamento","title":"Tabela de Versionamento","text":"Vers\u00e3o Data Autor Descri\u00e7\u00e3o <code>1.0</code> 30/09/2025 Ana Luiza Soares Cria\u00e7\u00e3o inicial da documenta\u00e7\u00e3o de testes."},{"location":"Cronograma/Cronograma/","title":"Cronograma Executado","text":""},{"location":"Cronograma/Cronograma/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento apresenta o cronograma detalhado na disciplina de Compiladores 1, os t\u00f3picos s\u00e3o separado por Sprints com cada entrega baseada no cronograma do plano de ensino e com base na metodologia \u00e1gil.</p>"},{"location":"Cronograma/Cronograma/#datas-importantes","title":"Datas importantes","text":"T\u00edtulo Descri\u00e7\u00e3o Data Preenchimento do formul\u00e1rio para apresenta\u00e7\u00e3o P1 Data limite para o lider preencher o formul\u00e1rio de apresenta\u00e7\u00e3o da P1 29/09 Ponto de controle 1 Apresenta\u00e7\u00e3o em sala do ponto de controle 1 01/10 Preenchimento do formul\u00e1rio para apresenta\u00e7\u00e3o P2 Data limite para o lider preencher o formul\u00e1rio de apresenta\u00e7\u00e3o da P2 27/10 Ponto de controle 2 Apresenta\u00e7\u00e3o em sala do ponto de controle 2 29/10 Disponibiliza\u00e7\u00e3o do GitHUb do trabalho para o professor Disponibilizar o acesso do professor ao reposit\u00f3rio do GitHub para a avalia\u00e7\u00e3o do projeto final e entrevista 12/11 Entrega Final Entrevista de entrega do trabalho final 01/12 - 03/12 Autoria de Vilmar Jos\u00e9 Fagundes"},{"location":"Cronograma/Cronograma/#sprint-1","title":"Sprint 1","text":"T\u00edtulo Autores Data de Inicio Data de Entrega Planejada Data de Entrega Executada Definir Linguagem e escopo Ana Luiza, Gabriel FLores, Jo\u00e3o Sapiencia, Matheus de Alcantara e Vilmar Jos\u00e9 27/08 11/09 11/09 Configurar Reposit\u00f3rio Ana Luiza, Gabriel FLores 27/08 29/08 28/08 Configurar Ambiente e Testar Ana Luiza 17/09 28/09 29/09 Arquivo inicial de gram\u00e1tica Gabriel FLores, Matheus de Alcantara 17/09 20/09 19/09 Arquivo inicial de regras L\u00e9xicas Jo\u00e3o Sapiencia, Vilmar Jos\u00e9 17/09 20/09 19/09 Autoria de Vilmar Jos\u00e9 Fagundes"},{"location":"Cronograma/Cronograma/#sprint-2","title":"Sprint 2","text":"T\u00edtulo Autores Data de Inicio Data de Entrega Planejada Data de Entrega Executada Concluir analisador l\u00e9xico Jo\u00e3o Sapiencia, Vilmar Jos\u00e9 17/09 22/09 22/09 Iniciar arquivo de regras sint\u00e1ticas Gabriel Flores, Matheus de alcantara 17/09 22/09 22/09 Criar Testes Ana Luiza 17/09 24/09 24/09 Autoria de Vilmar Jos\u00e9 Fagundes"},{"location":"Cronograma/Cronograma/#sprint-3","title":"Sprint 3","text":"T\u00edtulo Autores Data de Inicio Data de Entrega Planejada Data de Entrega Executada Evoluir analisador sint\u00e1tico Ana Luiza, Gabriel FLores, Matheus de Alcantara 17/09 23/09 22/09 Implementar l\u00f3gica de indenta\u00e7\u00e3o Jo\u00e3o Sapiencia, Vilmar Jos\u00e9 17/09 23/09 23/09 Testar Funcionamento e tratar erros Ana Luiza 17/09 29/09 29/09 Autoria de Vilmar Jos\u00e9 Fagundes"},{"location":"Cronograma/Cronograma/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 29/09/2025 Vers\u00e3o inicial do documento, com a defini\u00e7\u00e3o inicial do cronograma executado. Vilmar Jos\u00e9"},{"location":"sprint1/","title":"Sprint 1","text":""},{"location":"sprint1/#atividades-realizadas","title":"Atividades Realizadas","text":"<ul> <li>Pesquisa e escolha das ferramentas para o desenvolvimento do compilador.</li> <li>Defini\u00e7\u00e3o do escopo inicial do projeto.</li> <li>Cria\u00e7\u00e3o do reposit\u00f3rio no GitHub e configura\u00e7\u00e3o do ambiente de desenvolvimento.</li> <li>Documenta\u00e7\u00e3o inicial do projeto, incluindo a estrutura do reposit\u00f3rio e o plano de trabalho.</li> <li>An\u00e1lise l\u00e9xica e sint\u00e1tica preliminar das linguagens Python e Ruby.</li> </ul>"},{"location":"sprint1/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor 2025-09-10 <code>1.0</code> Cria\u00e7\u00e3o do documento inicial da Sprint 1 Matheus de Alc\u00e2ntara"},{"location":"sprint1/analise_lexica/","title":"An\u00e1lise L\u00e9xica","text":""},{"location":"sprint1/analise_lexica/#objetivo","title":"Objetivo","text":"<p>Descrever o funcionamento do analisador l\u00e9xico (lexer) do compilador, incluindo os tokens reconhecidos, suas express\u00f5es regulares e exemplos de entradas e sa\u00eddas.</p>"},{"location":"sprint1/analise_lexica/#tokens-reconhecidos","title":"Tokens Reconhecidos","text":"<p>O lexer reconhece os seguintes tokens:</p> Token Lexema (ex.) Regex/Descri\u00e7\u00e3o Valor sem\u00e2ntico IDENT myVar [_a-zA-Z][_0-9a-zA-Z]* Nome do identificador INT 123 [+-]?(0 [1-9][0-9]*) FLOAT 3.14 [+-]?(0.[0-9]+ [1-9][0-9]*.[0-9]+) STR \"texto\" \\\".?\\\" ou \\'?\\' Literal string PLUS + + Operador adi\u00e7\u00e3o MINUS - - Operador subtra\u00e7\u00e3o TIMES * * Operador multiplica\u00e7\u00e3o DIVIDE / / Operador divis\u00e3o LPAREN ( ( Par\u00eantese esquerdo RPAREN ) ) Par\u00eantese direito COLON : : Dois pontos COMA , , V\u00edrgula GT &gt; &gt; Maior que LT &lt; &lt; Menor que EQ == == Igualdade NEQ != != Diferente"},{"location":"sprint1/analise_lexica/#funcionamento","title":"Funcionamento","text":"<p>O analisador l\u00e9xico utiliza express\u00f5es regulares para identificar os tokens no c\u00f3digo-fonte. Ele ignora espa\u00e7os em branco e coment\u00e1rios, e gera erros para caracteres inv\u00e1lidos.</p>"},{"location":"sprint1/analise_lexica/#exemplo-de-entrada-e-saida","title":"Exemplo de Entrada e Sa\u00edda","text":""},{"location":"sprint1/analise_lexica/#entrada","title":"Entrada","text":"<pre><code>def func():\n    if 10 &gt; 5:\n        return 1\n</code></pre>"},{"location":"sprint1/analise_lexica/#saida","title":"Sa\u00edda","text":"<pre><code>TOKEN: def, lex: 'def'\nTOKEN: LPAREN, lex: '('\nTOKEN: RPAREN, lex: ')'\nTOKEN: COLON, lex: ':'\nTOKEN: NEWLINE\nTOKEN: INDENT (empilhado)\nTOKEN: if, lex: 'if'\nTOKEN: INT, lex: '10'\nTOKEN: GT, lex: '&gt;'\nTOKEN: INT, lex: '5'\nTOKEN: COLON, lex: ':'\nTOKEN: NEWLINE\nTOKEN: INDENT (empilhado)\nTOKEN: return, lex: 'return'\nTOKEN: INT, lex: '1'\nTOKEN: EOF, lex: ''\nTOKEN: DEDENT (empilhado)\nTOKEN: DEDENT (empilhado)\nTOKEN: NEWLINE (empilhado no EOF)\n</code></pre>"},{"location":"sprint1/analise_lexica/#tratamento-de-erros-lexicos","title":"Tratamento de Erros L\u00e9xicos","text":"<p>O lexer identifica e reporta erros para caracteres inv\u00e1lidos. Por exemplo:</p>"},{"location":"sprint1/analise_lexica/#entrada-invalida","title":"Entrada Inv\u00e1lida","text":"<pre><code>x = 10 @ 5\n</code></pre>"},{"location":"sprint1/analise_lexica/#mensagem-de-erro","title":"Mensagem de Erro","text":"<pre><code>Caractere inv\u00e1lido: @\n</code></pre>"},{"location":"sprint1/analise_lexica/#referencias","title":"Refer\u00eancias","text":"<ul> <li>C\u00f3digo do lexer (<code>lexer/lexer.l</code>).</li> <li>Documenta\u00e7\u00e3o do projeto.</li> </ul>"},{"location":"sprint1/analise_sintatica/","title":"An\u00e1lise Sint\u00e1tica","text":""},{"location":"sprint1/analise_sintatica/#objetivo","title":"Objetivo","text":"<p>Descrever o funcionamento do analisador sint\u00e1tico (parser) do compilador, incluindo a gram\u00e1tica utilizada e tratamento de erros sint\u00e1ticos.</p>"},{"location":"sprint1/analise_sintatica/#gramatica","title":"Gram\u00e1tica","text":"<p>O parser utiliza a seguinte gram\u00e1tica para analisar o c\u00f3digo-fonte:</p>"},{"location":"sprint1/analise_sintatica/#definicao-em-bnf","title":"Defini\u00e7\u00e3o em BNF","text":"<pre><code>program      ::= statement_list\nstatement_list ::= statement | statement_list statement\nstatement    ::= simple_statement NEWLINE | compound_statement\nsimple_statement ::= expression | RTRN expression | RTRN | BRK | IDENT\ncompound_statement ::= if_statement | while_statement | function_definition\nif_statement ::= IF expression COLON suite\n               | IF expression COLON suite ELSE COLON suite\n               | IF expression COLON suite elif_clauses ELSE COLON suite\nelif_clauses ::= ELIF expression COLON suite | elif_clauses ELIF expression COLON suite\nwhile_statement ::= WHL expression COLON suite\nfunction_definition ::= DEF IDENT LPAREN RPAREN COLON suite\nsuite        ::= NEWLINE INDENT statement_list DEDENT\nexpression   ::= expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | LPAREN expression RPAREN\n               | INT | FLOAT | STR\n</code></pre>"},{"location":"sprint1/analise_sintatica/#tratamento-de-erros-sintaticos","title":"Tratamento de Erros Sint\u00e1ticos","text":"<p>O parser identifica e reporta erros de sintaxe, como tokens inesperados ou estruturas incompletas. Exemplos:</p>"},{"location":"sprint1/analise_sintatica/#exemplo-1-token-inesperado","title":"Exemplo 1: Token Inesperado","text":""},{"location":"sprint1/analise_sintatica/#entrada","title":"Entrada","text":"<pre><code>if x &gt; 0\n    y = y + 1\n</code></pre>"},{"location":"sprint1/analise_sintatica/#mensagem-de-erro","title":"Mensagem de Erro","text":"<pre><code>Erro sint\u00e1tico na linha 2 pr\u00f3ximo a 'y': esperado ':'\n</code></pre>"},{"location":"sprint1/analise_sintatica/#exemplo-2-estrutura-incompleta","title":"Exemplo 2: Estrutura Incompleta","text":""},{"location":"sprint1/analise_sintatica/#entrada_1","title":"Entrada","text":"<pre><code>def func(\n</code></pre>"},{"location":"sprint1/analise_sintatica/#mensagem-de-erro_1","title":"Mensagem de Erro","text":"<pre><code>Erro sint\u00e1tico na linha 1 pr\u00f3ximo a 'EOF': esperado ')'\n</code></pre>"},{"location":"sprint1/analise_sintatica/#referencias","title":"Refer\u00eancias","text":"<ul> <li>C\u00f3digo do parser (<code>parser/parser.y</code>).</li> <li>Documenta\u00e7\u00e3o do projeto.</li> </ul>"},{"location":"sprint1/escopo/","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve o escopo do projeto, detalhando as funcionalidades e limita\u00e7\u00f5es do compilador Python -&gt; Ruby a ser desenvolvido pela equipe. O objetivo principal \u00e9 criar uma ferramenta que permita a convers\u00e3o autom\u00e1tica de c\u00f3digo Python para Ruby, construindo o analisador l\u00e9xico e analisador sint\u00e1tico.</p>"},{"location":"sprint1/escopo/#escopo-do-projeto","title":"Escopo do Projeto","text":"<p>Para definir o escopo do projeto, foram considerados aspectos recomendados pelo professor durante as aulas e o tempo dispon\u00edvel no semestre para implementa\u00e7\u00e3o. O escopo escolhido inclui:</p> <ul> <li>Funcionalidades Principais:</li> <li>Estruturas de controle if e while.</li> <li>Defini\u00e7\u00e3o e chamada de fun\u00e7\u00f5es.</li> <li>Manipula\u00e7\u00e3o de vari\u00e1veis e tipos de dados b\u00e1sicos (inteiros, floats, strings, arrays).</li> <li>Coment\u00e1rios em linha</li> <li>Opera\u00e7\u00f5es aritm\u00e9ticas: adi\u00e7\u00e3o, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o, potencia\u00e7\u00e3o e m\u00f3dulo.</li> <li>Opera\u00e7\u00f5es de compara\u00e7\u00e3o: igual, diferente, maior, menor, maior ou igual e menor ou igual.</li> <li>Identa\u00e7\u00e3o para definir blocos de c\u00f3digo.</li> </ul>"},{"location":"sprint1/escopo/#justificativa-do-escopo","title":"Justificativa do Escopo","text":"<p>Esse conjunto de funcionalidades foi escolhido por estar presente na ementa da mat\u00e9ria de Algoritmos e Programa\u00e7\u00e3o de computadores, garantindo que o compilador seja capaz de lidar com a maioria dos casos b\u00e1sicos encontrados em programas simples, servindo como uma base s\u00f3lida para futuras expans\u00f5es e cria\u00e7\u00e3o de programas mais complexos.</p>"},{"location":"sprint1/escopo/#referencias-bibliograficas","title":"Refer\u00eancias bibliogr\u00e1ficas","text":"<ol> <li>PYTHON SOFTWARE FOUNDATION. Python 3 \u2014 Documenta\u00e7\u00e3o oficial. Dispon\u00edvel em: https://docs.python.org/3/. Acesso em: 29 set. 2025.</li> <li>UNIVERSIDADE DE BRAS\u00cdLIA (UnB). CIC0004 \u2014 Algoritmos e Programa\u00e7\u00e3o de Computadores. SIGAA - Sistema Integrado de Gest\u00e3o de Atividades Acad\u00eamicas. Dispon\u00edvel em: https://sigaa.unb.br/sigaa/public/departamento/componentes.jsf. Acesso em: 29 set. 2025.</li> </ol>"},{"location":"sprint1/escopo/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 29/09/2025 Vers\u00e3o inicial do documento, com a defini\u00e7\u00e3o inicial do escopo. Matheus de Alc\u00e2ntara"},{"location":"sprint1/especificacao_linguagem/","title":"Especifica\u00e7\u00e3o da Linguagem \u2014 Mini Python","text":""},{"location":"sprint1/especificacao_linguagem/#objetivo","title":"Objetivo","text":"<p>Esta especifica\u00e7\u00e3o descreve a linguagem de entrada aceita pelo compilador desenvolvido, incluindo tokens reconhecidos, estruturas sint\u00e1ticas suportadas e exemplos pr\u00e1ticos.</p>"},{"location":"sprint1/especificacao_linguagem/#tokens-reconhecidos","title":"Tokens Reconhecidos","text":"Token Descri\u00e7\u00e3o Exemplo <code>DEF</code> Defini\u00e7\u00e3o de fun\u00e7\u00e3o <code>def</code> <code>RTRN</code> Retorno de fun\u00e7\u00e3o <code>return</code> <code>IF</code> Condicional <code>if</code> <code>ELIF</code> Condicional intermedi\u00e1rio <code>elif</code> <code>ELSE</code> Condicional alternativo <code>else</code> <code>WHL</code> La\u00e7o de repeti\u00e7\u00e3o <code>while</code> <code>BRK</code> Interrup\u00e7\u00e3o de la\u00e7o <code>break</code> <code>FLS</code> Booleano falso <code>False</code> <code>TRUE</code> Booleano verdadeiro <code>True</code> <code>NONE</code> Valor nulo <code>None</code> <code>AND</code>, <code>OR</code>, <code>NOT</code> Operadores l\u00f3gicos <code>and</code>, <code>or</code>, <code>not</code> <code>INT</code> N\u00famero inteiro <code>42</code> <code>FLOAT</code> N\u00famero de ponto flutuante <code>3.14</code> <code>STR</code> Cadeia de caracteres <code>\"texto\"</code> <code>NAME</code> Identificador (vari\u00e1vel/fun\u00e7\u00e3o) <code>x</code>, <code>soma</code> <code>PLUS</code> Soma <code>+</code> <code>MINUS</code> Subtra\u00e7\u00e3o <code>-</code> <code>TIMES</code> Multiplica\u00e7\u00e3o <code>*</code> <code>DIVIDE</code> Divis\u00e3o <code>/</code> <code>ASSIGN</code> Atribui\u00e7\u00e3o <code>=</code> <code>EQ</code> Igualdade <code>==</code> <code>NEQ</code> Diferente <code>!=</code> <code>GT</code> Maior <code>&gt;</code> <code>LT</code> Menor <code>&lt;</code> <code>GE</code> Maior ou igual <code>&gt;=</code> <code>LE</code> Menor ou igual <code>&lt;=</code> <code>IS</code> Compara\u00e7\u00e3o de identidade <code>is</code> <code>LPAREN</code> Par\u00eantese esquerdo <code>(</code> <code>RPAREN</code> Par\u00eantese direito <code>)</code> <code>RCBRACKET</code> Chave direita <code>}</code> <code>LCBRACKET</code> Chave esquerda <code>{</code> <code>RSBRACKET</code> Colchete direito <code>]</code> <code>LSBRACKET</code> Colchete esquerdo <code>[</code> <code>COLON</code> Dois pontos <code>:</code> <code>COMA</code> V\u00edrgula <code>,</code> <code>NEWLINE</code> Nova linha <code>INDENT</code> Indenta\u00e7\u00e3o (in\u00edcio de bloco) <code>DEDENT</code> Fim de bloco"},{"location":"sprint1/especificacao_linguagem/#estruturas-sintaticas-suportadas","title":"Estruturas Sint\u00e1ticas Suportadas","text":""},{"location":"sprint1/especificacao_linguagem/#1-atribuicao","title":"1. Atribui\u00e7\u00e3o","text":"<pre><code>x = 10\nnome = \"Gabriel\"\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#2-expressoes-aritmeticas-e-literais","title":"2. Express\u00f5es Aritm\u00e9ticas e Literais","text":"<pre><code>resultado = (a + b) * 2 - 5 / 3\nvalor = 3.14\ntexto = \"Ol\u00e1\"\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#3-expressoes-de-comparacao","title":"3. Express\u00f5es de Compara\u00e7\u00e3o","text":"<pre><code>if x &gt;= 10:\n    print(\"Maior ou igual a 10\")\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#4-estruturas-de-controle","title":"4. Estruturas de Controle","text":"<p>if/elif/else</p> <pre><code>if x &gt; 0:\n    print(\"Positivo\")\nelif x == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negativo\")\n\n</code></pre> <p>While</p> <pre><code>while x &gt; 0:\n    x = x - 1\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#5-definicao-e-chamada-de-funcoes","title":"5. Defini\u00e7\u00e3o e Chamada de Fun\u00e7\u00f5es","text":"<pre><code>def soma(a, b):\n    return a + b\n\nresultado = soma(2, 3)\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#6-comentario","title":"6. Coment\u00e1rio","text":"<pre><code># Isto \u00e9 um coment\u00e1rio\n\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code># calcula fatorial\ndef fatorial(n):\n    resultado = 1\n    while n &gt; 1:\n        resultado = resultado * n\n        n = n - 1\n    return resultado\n\nx = 5\nprint(fatorial(x))\n</code></pre>"},{"location":"sprint1/especificacao_linguagem/#conclusao","title":"Conclus\u00e3o","text":"<p>Esta especifica\u00e7\u00e3o apresenta um subconjunto da linguagem Python, adaptado para fins did\u00e1ticos e para o desenvolvimento de um compilador simples. O Compiladorn cobre as principais estruturas de controle, opera\u00e7\u00f5es aritm\u00e9ticas, fun\u00e7\u00f5es, vari\u00e1veis e regras de indenta\u00e7\u00e3o, permitindo a constru\u00e7\u00e3o de programas estruturados e leg\u00edveis. Apesar das limita\u00e7\u00f5es em rela\u00e7\u00e3o \u00e0 linguagem Python completa, este subconjunto \u00e9 suficiente para exercitar conceitos fundamentais de an\u00e1lise l\u00e9xica, sint\u00e1tica e sem\u00e2ntica, servindo como base s\u00f3lida para estudos e experimentos em compiladores.</p>"},{"location":"sprint1/especificacao_linguagem/#referencias","title":"Refer\u00eancias","text":"<ul> <li>PYTHON SOFTWARE FOUNDATION. Python 3 \u2014 Documenta\u00e7\u00e3o oficial. Dispon\u00edvel em: https://docs.python.org/3/. Acesso em: 29 set. 2025.</li> </ul>"},{"location":"sprint1/especificacao_linguagem/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 30/09/2025 Especifica\u00e7\u00e3o da linguagem Python Gabriel Flores"}]}